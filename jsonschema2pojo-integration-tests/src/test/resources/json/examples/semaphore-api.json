{
  "basePath": "/api", 
  "definitions": {
    "APIToken": {
      "properties": {
        "created": {
          "format": "date-time", 
          "type": "string"
        }, 
        "expired": {
          "type": "boolean"
        }, 
        "id": {
          "type": "string"
        }, 
        "user_id": {
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "AccessKey": {
      "properties": {
        "id": {
          "type": "integer"
        }, 
        "key": {
          "type": "string"
        }, 
        "name": {
          "type": "string"
        }, 
        "project_id": {
          "type": "integer"
        }, 
        "secret": {
          "type": "string"
        }, 
        "type": {
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "Environment": {
      "properties": {
        "id": {
          "type": "integer"
        }, 
        "json": {
          "type": "string"
        }, 
        "name": {
          "type": "string"
        }, 
        "password": {
          "type": "string"
        }, 
        "project_id": {
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "Event": {
      "properties": {
        "description": {
          "type": "string"
        }, 
        "object_id": {
          "type": "integer"
        }, 
        "object_type": {
          "type": "string"
        }, 
        "project_id": {
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "InfoType": {
      "properties": {
        "update": {
          "properties": {
            "tag_name": {
              "type": "string"
            }
          }, 
          "type": "object"
        }, 
        "updateBody": {
          "type": "string"
        }, 
        "version": {
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "Inventory": {
      "properties": {
        "id": {
          "type": "integer"
        }, 
        "inventory": {
          "type": "string"
        }, 
        "key_id": {
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }, 
        "project_id": {
          "type": "integer"
        }, 
        "ssh_key_id": {
          "type": "integer"
        }, 
        "type": {
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "Login": {
      "properties": {
        "auth": {
          "description": "Username/Email address", 
          "type": "string"
        }, 
        "password": {
          "description": "Password", 
          "format": "password", 
          "type": "string"
        }
      }, 
      "required": [
        "auth", 
        "password"
      ], 
      "type": "object"
    }, 
    "PONG": {
      "format": "PONG", 
      "type": "string"
    }, 
    "Project": {
      "properties": {
        "created": {
          "format": "date-time", 
          "type": "string"
        }, 
        "id": {
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "Repository": {
      "properties": {
        "git_url": {
          "type": "string"
        }, 
        "id": {
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }, 
        "project_id": {
          "type": "integer"
        }, 
        "ssh_key_id": {
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "Task": {
      "properties": {
        "output": {
          "type": "string"
        }, 
        "task": {
          "type": "string"
        }, 
        "task_id": {
          "type": "integer"
        }, 
        "time": {
          "format": "date-time", 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "Template": {
      "properties": {
        "alias": {
          "type": "string"
        }, 
        "arguments": {
          "type": "string"
        }, 
        "environment_id": {
          "type": "integer"
        }, 
        "id": {
          "type": "integer"
        }, 
        "inventory_id": {
          "type": "integer"
        }, 
        "override_args": {
          "type": "boolean"
        }, 
        "playbook": {
          "type": "string"
        }, 
        "project_id": {
          "type": "integer"
        }, 
        "repository_id": {
          "type": "integer"
        }, 
        "ssh_key_id": {
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "User": {
      "properties": {
        "created": {
          "format": "date-time", 
          "type": "string"
        }, 
        "email": {
          "type": "string"
        }, 
        "id": {
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }, 
        "username": {
          "type": "string"
        }
      }, 
      "type": "object"
    }
  }, 
  "host": "localhost:3000", 
  "info": {
    "description": "Semaphore API", 
    "title": "SEMAPHORE", 
    "version": "2.1.0"
  }, 
  "parameters": {
    "environment_id": {
      "description": "environment ID", 
      "in": "path", 
      "name": "environment_id", 
      "required": true, 
      "type": "integer"
    }, 
    "inventory_id": {
      "description": "inventory ID", 
      "in": "path", 
      "name": "inventory_id", 
      "required": true, 
      "type": "integer"
    }, 
    "key_id": {
      "description": "key ID", 
      "in": "path", 
      "name": "key_id", 
      "required": true, 
      "type": "integer"
    }, 
    "project_id": {
      "description": "Project ID", 
      "in": "path", 
      "name": "project_id", 
      "required": true, 
      "type": "integer"
    }, 
    "repository_id": {
      "description": "repository ID", 
      "in": "path", 
      "name": "repository_id", 
      "required": true, 
      "type": "integer"
    }, 
    "task_id": {
      "description": "task ID", 
      "in": "path", 
      "name": "task_id", 
      "required": true, 
      "type": "integer"
    }, 
    "template_id": {
      "description": "template ID", 
      "in": "path", 
      "name": "template_id", 
      "required": true, 
      "type": "integer"
    }, 
    "user_id": {
      "description": "User ID", 
      "in": "path", 
      "name": "user_id", 
      "required": true, 
      "type": "integer"
    }
  }, 
  "paths": {
    "/auth/login": {
      "post": {
        "description": "Upon success you will be logged in\n", 
        "parameters": [
          {
            "in": "body", 
            "name": "Login Body", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "You are logged in"
          }, 
          "400": {
            "description": "something in body is missing / is invalid"
          }
        }, 
        "summary": "Performs Login", 
        "tags": [
          "authentication"
        ]
      }
    }, 
    "/auth/logout": {
      "post": {
        "responses": {
          "204": {
            "description": "Your session was successfully nuked"
          }
        }, 
        "summary": "Destroys current session", 
        "tags": [
          "authentication"
        ]
      }
    }, 
    "/events": {
      "get": {
        "responses": {
          "200": {
            "description": "Array of events in chronological order", 
            "schema": {
              "items": {
                "$ref": "#/definitions/Event"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "Get Events related to Semaphore and projects you are part of"
      }
    }, 
    "/info": {
      "get": {
        "description": "you must be authenticated to use this", 
        "responses": {
          "200": {
            "description": "ok", 
            "schema": {
              "$ref": "#/definitions/InfoType"
            }
          }
        }, 
        "summary": "Fetches information about semaphore"
      }
    }, 
    "/ping": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful \"PONG\" reply", 
            "schema": {
              "$ref": "#/definitions/PONG"
            }
          }
        }, 
        "summary": "PING test"
      }
    }, 
    "/project/{project_id}": {
      "delete": {
        "responses": {
          "204": {
            "description": "Project deleted"
          }
        }, 
        "summary": "Delete project", 
        "tags": [
          "project"
        ]
      }, 
      "get": {
        "responses": {
          "200": {
            "description": "Project", 
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }, 
        "summary": "Fetch project", 
        "tags": [
          "project"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/parameters/project_id"
        }
      ], 
      "put": {
        "parameters": [
          {
            "in": "body", 
            "name": "Project", 
            "required": true, 
            "schema": {
              "properties": {
                "name": {
                  "type": "string"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Project saved"
          }
        }, 
        "summary": "Update project", 
        "tags": [
          "project"
        ]
      }
    }, 
    "/project/{project_id}/environment": {
      "get": {
        "responses": {
          "200": {
            "description": "environment", 
            "schema": {
              "items": {
                "$ref": "#/definitions/Environment"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "Get environment", 
        "tags": [
          "project"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/parameters/project_id"
        }
      ], 
      "post": {
        "parameters": [
          {
            "in": "body", 
            "name": "environment", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Environment created"
          }
        }, 
        "summary": "Add environment", 
        "tags": [
          "project"
        ]
      }
    }, 
    "/project/{project_id}/environment/{environment_id}": {
      "delete": {
        "responses": {
          "204": {
            "description": "environment removed"
          }
        }, 
        "summary": "Removes environment", 
        "tags": [
          "project"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/parameters/project_id"
        }, 
        {
          "$ref": "#/parameters/environment_id"
        }
      ], 
      "put": {
        "parameters": [
          {
            "in": "body", 
            "name": "environment", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Environment Updated"
          }
        }, 
        "summary": "Update environment", 
        "tags": [
          "project"
        ]
      }
    }, 
    "/project/{project_id}/events": {
      "get": {
        "responses": {
          "200": {
            "description": "Array of events in chronological order", 
            "schema": {
              "items": {
                "$ref": "#/definitions/Event"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "Get Events related to this project", 
        "tags": [
          "project"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/parameters/project_id"
        }
      ]
    }, 
    "/project/{project_id}/inventory": {
      "get": {
        "responses": {
          "200": {
            "description": "inventory", 
            "schema": {
              "items": {
                "$ref": "#/definitions/Inventory"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "Get inventory", 
        "tags": [
          "project"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/parameters/project_id"
        }
      ], 
      "post": {
        "parameters": [
          {
            "in": "body", 
            "name": "Inventory", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/Inventory"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "inventory created"
          }
        }, 
        "summary": "create inventory", 
        "tags": [
          "project"
        ]
      }
    }, 
    "/project/{project_id}/inventory/{inventory_id}": {
      "delete": {
        "responses": {
          "204": {
            "description": "inventory removed"
          }
        }, 
        "summary": "Removes inventory", 
        "tags": [
          "project"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/parameters/project_id"
        }, 
        {
          "$ref": "#/parameters/inventory_id"
        }
      ], 
      "put": {
        "parameters": [
          {
            "in": "body", 
            "name": "Inventory", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/Inventory"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Inventory updated"
          }
        }, 
        "summary": "Updates inventory", 
        "tags": [
          "project"
        ]
      }
    }, 
    "/project/{project_id}/keys": {
      "get": {
        "parameters": [
          {
            "description": "Filter by key type", 
            "format": "ssh/aws/gcloud/do", 
            "in": "query", 
            "name": "Key type", 
            "required": false, 
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "Access Keys", 
            "schema": {
              "items": {
                "$ref": "#/definitions/AccessKey"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "Get access keys linked to project", 
        "tags": [
          "project"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/parameters/project_id"
        }
      ], 
      "post": {
        "parameters": [
          {
            "in": "body", 
            "name": "Access Key", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/AccessKey"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Access Key created"
          }, 
          "400": {
            "description": "Bad type"
          }
        }, 
        "summary": "Add access key", 
        "tags": [
          "project"
        ]
      }
    }, 
    "/project/{project_id}/keys/{key_id}": {
      "delete": {
        "responses": {
          "204": {
            "description": "access key removed"
          }
        }, 
        "summary": "Removes access key", 
        "tags": [
          "project"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/parameters/project_id"
        }, 
        {
          "$ref": "#/parameters/key_id"
        }
      ], 
      "put": {
        "parameters": [
          {
            "in": "body", 
            "name": "Access Key", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/AccessKey"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Key updated"
          }, 
          "400": {
            "description": "Bad type"
          }
        }, 
        "summary": "Updates access key", 
        "tags": [
          "project"
        ]
      }
    }, 
    "/project/{project_id}/repositories": {
      "get": {
        "responses": {
          "200": {
            "description": "repositories", 
            "schema": {
              "items": {
                "$ref": "#/definitions/Repository"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "Get repositories", 
        "tags": [
          "project"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/parameters/project_id"
        }
      ], 
      "post": {
        "parameters": [
          {
            "in": "body", 
            "name": "Repository", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/Repository"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Repository created"
          }
        }, 
        "summary": "Add repository", 
        "tags": [
          "project"
        ]
      }
    }, 
    "/project/{project_id}/repositories/{repository_id}": {
      "delete": {
        "responses": {
          "204": {
            "description": "repository removed"
          }
        }, 
        "summary": "Removes repository", 
        "tags": [
          "project"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/parameters/project_id"
        }, 
        {
          "$ref": "#/parameters/repository_id"
        }
      ]
    }, 
    "/project/{project_id}/tasks": {
      "parameters": [
        {
          "$ref": "#/parameters/project_id"
        }
      ], 
      "post": {
        "parameters": [
          {
            "in": "body", 
            "name": "task", 
            "required": true, 
            "schema": {
              "properties": {
                "debug": {
                  "type": "boolean"
                }, 
                "dry_run": {
                  "type": "boolean"
                }, 
                "environment": {
                  "type": "string"
                }, 
                "playbook": {
                  "type": "string"
                }, 
                "template_id": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Task queued", 
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        }, 
        "summary": "Starts a job", 
        "tags": [
          "project"
        ]
      }
    }, 
    "/project/{project_id}/tasks/{task_id}": {
      "delete": {
        "responses": {
          "204": {
            "description": "task deleted"
          }
        }, 
        "summary": "Deletes task (including output)", 
        "tags": [
          "project"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/parameters/project_id"
        }, 
        {
          "$ref": "#/parameters/task_id"
        }
      ]
    }, 
    "/project/{project_id}/tasks/{task_id}/output": {
      "get": {
        "responses": {
          "200": {
            "description": "output", 
            "schema": {
              "items": {
                "$ref": "#/definitions/TaskOutput"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "Get task output", 
        "tags": [
          "project"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/parameters/project_id"
        }, 
        {
          "$ref": "#/parameters/task_id"
        }
      ]
    }, 
    "/project/{project_id}/templates": {
      "get": {
        "responses": {
          "200": {
            "description": "template", 
            "schema": {
              "items": {
                "$ref": "#/definitions/Template"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "Get template", 
        "tags": [
          "project"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/parameters/project_id"
        }
      ], 
      "post": {
        "parameters": [
          {
            "in": "body", 
            "name": "template", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/Template"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "template created", 
            "schema": {
              "$ref": "#/definitions/Template"
            }
          }
        }, 
        "summary": "create template", 
        "tags": [
          "project"
        ]
      }
    }, 
    "/project/{project_id}/templates/{template_id}": {
      "delete": {
        "responses": {
          "204": {
            "description": "template removed"
          }
        }, 
        "summary": "Removes template", 
        "tags": [
          "project"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/parameters/project_id"
        }, 
        {
          "$ref": "#/parameters/template_id"
        }
      ], 
      "put": {
        "parameters": [
          {
            "in": "body", 
            "name": "template", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/Template"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "template updated"
          }
        }, 
        "summary": "Updates template", 
        "tags": [
          "project"
        ]
      }
    }, 
    "/project/{project_id}/users": {
      "get": {
        "responses": {
          "200": {
            "description": "Users", 
            "schema": {
              "items": {
                "$ref": "#/definitions/User"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "Get users linked to project", 
        "tags": [
          "project"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/parameters/project_id"
        }
      ], 
      "post": {
        "parameters": [
          {
            "in": "body", 
            "name": "User", 
            "required": true, 
            "schema": {
              "properties": {
                "admin": {
                  "type": "boolean"
                }, 
                "user_id": {
                  "format": "userID", 
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "User added"
          }
        }, 
        "summary": "Link user to project", 
        "tags": [
          "project"
        ]
      }
    }, 
    "/project/{project_id}/users/{user_id}": {
      "delete": {
        "responses": {
          "204": {
            "description": "User removed"
          }
        }, 
        "summary": "Removes user from project", 
        "tags": [
          "project"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/parameters/project_id"
        }, 
        {
          "$ref": "#/parameters/user_id"
        }
      ]
    }, 
    "/project/{project_id}/users/{user_id}/admin": {
      "delete": {
        "responses": {
          "204": {
            "description": "User admin privileges revoked"
          }
        }, 
        "summary": "Revoke admin privileges", 
        "tags": [
          "project"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/parameters/project_id"
        }, 
        {
          "$ref": "#/parameters/user_id"
        }
      ], 
      "post": {
        "responses": {
          "204": {
            "description": "User made administrator"
          }
        }, 
        "summary": "Makes user admin", 
        "tags": [
          "project"
        ]
      }
    }, 
    "/projects": {
      "get": {
        "responses": {
          "200": {
            "description": "List of projects", 
            "schema": {
              "items": {
                "$ref": "#/definitions/Project"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "Get projects", 
        "tags": [
          "projects"
        ]
      }, 
      "post": {
        "parameters": [
          {
            "in": "body", 
            "name": "Project", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Created project"
          }
        }, 
        "summary": "Create a new project", 
        "tags": [
          "projects"
        ]
      }
    }, 
    "/upgrade": {
      "get": {
        "responses": {
          "200": {
            "description": "ok", 
            "schema": {
              "$ref": "#/definitions/InfoType"
            }
          }, 
          "204": {
            "description": "no update"
          }
        }, 
        "summary": "Check if new updates available and fetch /info"
      }, 
      "post": {
        "responses": {
          "200": {
            "description": "Server binary was replaced by new version, server has shut down."
          }
        }, 
        "summary": "Upgrade the server"
      }
    }, 
    "/user": {
      "get": {
        "responses": {
          "200": {
            "description": "User", 
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }, 
        "summary": "Fetch logged in user", 
        "tags": [
          "user"
        ]
      }
    }, 
    "/user/tokens": {
      "get": {
        "responses": {
          "200": {
            "description": "API Tokens", 
            "schema": {
              "items": {
                "$ref": "#/definitions/APIToken"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "Fetch API tokens for user", 
        "tags": [
          "authentication", 
          "user"
        ]
      }, 
      "post": {
        "responses": {
          "201": {
            "description": "API Token", 
            "schema": {
              "$ref": "#/definitions/APIToken"
            }
          }
        }, 
        "summary": "Create an API token", 
        "tags": [
          "authentication", 
          "user"
        ]
      }
    }, 
    "/user/tokens/{api_token_id}": {
      "delete": {
        "responses": {
          "204": {
            "description": "Expired API Token"
          }
        }, 
        "summary": "Expires API token", 
        "tags": [
          "authentication", 
          "user"
        ]
      }, 
      "parameters": [
        {
          "in": "path", 
          "name": "api_token_id", 
          "required": true, 
          "type": "string"
        }
      ]
    }, 
    "/users": {
      "get": {
        "responses": {
          "200": {
            "description": "Users", 
            "schema": {
              "items": {
                "$ref": "#/definitions/User"
              }, 
              "type": "array"
            }
          }
        }, 
        "summary": "Fetches all users", 
        "tags": [
          "user"
        ]
      }, 
      "post": {
        "parameters": [
          {
            "in": "body", 
            "name": "User", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "User created", 
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }, 
        "summary": "Creates a user", 
        "tags": [
          "user"
        ]
      }
    }, 
    "/users/{user_id}": {
      "delete": {
        "responses": {
          "204": {
            "description": "User deleted"
          }
        }, 
        "summary": "Deletes user", 
        "tags": [
          "user"
        ]
      }, 
      "get": {
        "responses": {
          "200": {
            "description": "User profile", 
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }, 
        "summary": "Fetches a user profile", 
        "tags": [
          "user"
        ]
      }, 
      "parameters": [
        {
          "$ref": "#/parameters/user_id"
        }
      ], 
      "put": {
        "parameters": [
          {
            "in": "body", 
            "name": "User", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "User Updated"
          }
        }, 
        "summary": "Updates user details", 
        "tags": [
          "user"
        ]
      }
    }, 
    "/users/{user_id}/password": {
      "parameters": [
        {
          "$ref": "#/parameters/user_id"
        }
      ], 
      "post": {
        "parameters": [
          {
            "in": "body", 
            "name": "Password", 
            "required": true, 
            "schema": {
              "properties": {
                "password": {
                  "format": "password", 
                  "type": "string"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Password updated"
          }
        }, 
        "summary": "Updates user password", 
        "tags": [
          "user"
        ]
      }
    }, 
    "/ws": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          }
        }, 
        "schemes": [
          "ws", 
          "wss"
        ], 
        "summary": "Websocket handler"
      }
    }
  }, 
  "produces": [
    "application/json"
  ], 
  "schemes": [
    "http", 
    "https"
  ], 
  "swagger": "2.0", 
  "tags": [
    {
      "description": "Authentication, Logout & API Tokens", 
      "name": "authentication"
    }, 
    {
      "description": "Everything related to a project", 
      "name": "project"
    }, 
    {
      "description": "User-related API", 
      "name": "user"
    }
  ]
}